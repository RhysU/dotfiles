# Configure colors, if available.
# Modified slightly from https://gist.github.com/828432
# Detection based on http://unix.stackexchange.com/questions/9957/
# Fixing TeX output width based on http://tex.stackexchange.com/questions/83600/
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    prompt_color_reset='\[\e[0m\]'
    prompt_color_git_clean='\[\e[0;37m\]'
    prompt_color_git_staged='\[\e[0;32m\]'
    prompt_color_git_unstaged='\[\e[0;31m\]'
    prompt_color_error_status='\[\e[0;31m\]'
else
    prompt_color_reset=
    prompt_color_git_clean=
    prompt_color_git_staged=
    prompt_color_git_unstaged=
    prompt_color_error_status=
fi

# Function to assemble the Git part of the prompt.
# Modified slightly from https://gist.github.com/828432
prompt_git_branch()
{
    GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
    if [ -z "$GIT_DIR" ]; then
        return 0
    fi
    GIT_HEAD=$(cat "$GIT_DIR/HEAD")
    GIT_BRANCH=${GIT_HEAD##*/}
    if [ ${#GIT_BRANCH} -eq 40 ]; then
        GIT_BRANCH="(no branch)"
    fi
    STATUS=$(git status --porcelain)
    if [ -z "$STATUS" ]; then
        git_color="${prompt_color_git_clean}"
    else
        echo -e "$STATUS" | grep -q '^ [A-Z\?]'
        if [ $? -eq 0 ]; then
            git_color="${prompt_color_git_unstaged}"
        else
            git_color="${prompt_color_git_staged}"
        fi
    fi
    echo "${git_color}${GIT_BRANCH}${prompt_color_reset} "
}

# Function to grab any non-root conda environment
# Modified from prompt_git_branch just above
prompt_conda_environment()
{
    echo "${CONDA_DEFAULT_ENV:+$CONDA_DEFAULT_ENV }"
}

# Change the title of the xterm / screen
preexec_title()
{
    case "$TERM" in
        screen*)
            echo -ne "\ek$1\e\\"
            ;;
        xterm*)
            echo -ne "\e]0;$1\007"
            ;;
    esac
}

precmd_prompt()
{
    # Capture the error status of the last command
    PREV_RET_VAL=$?;

    # Prepare the basic prompt including git branch information
    PS1="[\! \u@\h $(prompt_conda_environment)$(prompt_git_branch)\W]"

    # Include last error status in red if nonzero
    if test $PREV_RET_VAL -ne 0; then
        PS1="${PS1}${prompt_color_error_status}[${PREV_RET_VAL}]${prompt_color_reset}"
    fi
    PS1="${PS1}\\$ "

    # Update the line output width for TeX and derivatives
    export max_print_line=$COLUMNS

    # An informative window title
    # See https://stackoverflow.com/questions/22694431
    preexec_title "$(basename "${PWD%/*}")/${PWD##*/}"
}

preexec_prompt()
{
    preexec_title "${1%% *}"
}

# Aliases ease using https://github.com/RhysU/zc against a particular database
if test -x "${HOME}/bin/zc"; then
    z_raw() { "$HOME/bin/zc" -d "$HOME/.zc"       "$@"; }
    z_add() { "$HOME/bin/zc" -d "$HOME/.zc" -a -- "$@"; }
else
    z_raw() { echo "RhysU/zc is not installed" 1>&2; false; }
    z_add() { :; }
fi

# Run http://github.com/RhysU/zc in some mode against fixed database.
# Whenever it succeeds and only one line is output, attempt to pushd there.
z() {
    local zout newline='
'
    if zout=$(z_raw "$@"); then
        case $zout in
          *"$newline"*) echo "$zout"          ;;  # 2+ matches => display
                    "") builtin pushd "$@"    ;;  # No match => use input
                     *) builtin pushd "$zout" ;;  # One match => use match
        esac
    fi
}
zf() { z -f -- "$@"; }  # Abbreviation
zr() { z -r -- "$@"; }  # Abbreviation
zt() { z -t -- "$@"; }  # Abbreviation

# Z becomes much more useful with tab completion hooks installed.
# Above z() must accommodate trailing slashes because of '-o filenames'.
_z_completion() {
    COMPREPLY=()
    while IFS=$'\n' read -r line; do
        COMPREPLY+=("$line")
    done < <(z_raw -- "${COMP_WORDS[@]:1}")
}
complete -o filenames -F _z_completion z

# On every command, record the working directory using z_add.
# Versus https://github.com/rupa/z, updating per-command nicer for GNU Screen.
# Also, the updates are lighter weight on account of backing zc implementation.
precmd_z() {
    # Only register non-HOME directories as HOME is just a 'cd' away.
    if [ "$PWD" != "$HOME" ]; then
        z_add "$PWD"
    fi
}

# Prompts use precmd/preexec hook per https://github.com/rcaloras/bash-preexec.
if [ -f "${HOME}/.preexec.bash" ]; then
    . "${HOME}/.preexec.bash"
    precmd_functions+=(precmd_prompt)
    preexec_functions+=(preexec_prompt)
    precmd_functions+=(precmd_z)
fi

# Use a nice prompt for bash -x debugging
PS4='(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]} - [${SHLVL},${BASH_SUBSHELL}, $?]
'
